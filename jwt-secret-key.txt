<dependency>
    <groupId>io.jsonwebtoken</groupId>
    <artifactId>jjwt</artifactId>
    <version>0.9.1</version> <!-- Check for the latest version -->
</dependency>


import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

@Component
public class JwtUtil {
    
    @Value("${JWT_SECRET}")
    private String secretKey;

    // Set the expiration time for the token (e.g., 10 minutes)
    private final long EXPIRATION_TIME = 10 * 60 * 1000; // 10 minutes

    public String generateToken(String username) {
        Map<String, Object> claims = new HashMap<>();
        return createToken(claims, username);
    }

    private String createToken(Map<String, Object> claims, String subject) {
        return Jwts.builder()
                .setClaims(claims)
                .setSubject(subject)
                .setIssuedAt(new Date(System.currentTimeMillis())) // Token issued time
                .setExpiration(new Date(System.currentTimeMillis() + EXPIRATION_TIME)) // Token expiration time
                .signWith(SignatureAlgorithm.HS256, secretKey) // Sign the token using HS256 and the secret key
                .compact(); // Create the token
    }

    // You can add methods to validate the token, extract claims, etc.
}




import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/auth")
public class AuthController {

    @Autowired
    private JwtUtil jwtUtil;

    @PostMapping("/login")
    public String login(@RequestParam String username) {
        // Here you would normally validate the user credentials
        // If valid, generate the token
        String token = jwtUtil.generateToken(username);
        return token; // Return the generated token
    }
}